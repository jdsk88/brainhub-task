{"version":3,"file":"static/js/320.91b16388.chunk.js","mappings":"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","sources":["components/Form/index.js","components/Form/validation.js","components/Dialog/index.js","components/DataTable/index.js","views/pages/eventsTable.js"],"sourcesContent":["import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Button, Box, TextField, Paper } from \"@mui/material\";\nimport { useFormik } from \"formik\";\nimport { initialValues, validationSchema } from \"./validation\";\nimport EventsServices from \"services/api/events\";\nimport { useSnackbar } from \"notistack\";\n\nconst EventFormHorizontal = () => {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const Snackbar = (msg, variant) => {\n    enqueueSnackbar(msg, { variant });\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema,\n    onSubmit: () => {\n      const newEvent = {\n        firstName: formik.values.firstName,\n        lastName: formik.values.lastName,\n        email: formik.values.email,\n        eventDate: Date.parse(formik.values.eventDate),\n      };\n      EventsServices.createItem(dispatch, newEvent, Snackbar);\n      formik.resetForm();\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <Box\n        component={Paper}\n        sx={{\n          py: 2,\n          width: \"100%\",\n          height: \"112px\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-evenly\",\n        }}\n      >\n        <TextField\n          sx={{ width: \"20%\" }}\n          id={\"firstName\"}\n          name={\"firstName\"}\n          type={\"text\"}\n          label={\"First Name\"}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.firstName ?? formik.values.firstName}\n          error={formik.touched.firstName && Boolean(formik.errors.firstName)}\n          helperText={formik.touched.firstName && formik.errors.firstName}\n        />\n        <TextField\n          sx={{ width: \"20%\" }}\n          id={\"lastName\"}\n          name={\"lastName\"}\n          type={\"text\"}\n          label={\"Last Name\"}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.lastName ?? formik.values.lastName}\n          error={formik.touched.lastName && Boolean(formik.errors.lastName)}\n          helperText={formik.touched.lastName && formik.errors.lastName}\n        />\n        <TextField\n          sx={{ width: \"20%\" }}\n          id={\"email\"}\n          name={\"email\"}\n          type={\"email\"}\n          label={\"e-mail\"}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.email ?? formik.values.email}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n        />\n        <TextField\n          sx={{ width: \"20%\" }}\n          id={\"eventDate\"}\n          name={\"eventDate\"}\n          type={\"datetime-local\"}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.eventDate ?? formik.values.eventDate}\n          error={formik.touched.eventDate && Boolean(formik.errors.eventDate)}\n          helperText={formik.touched.eventDate && formik.errors.eventDate}\n        />\n        <Button\n          sx={{ width: \"15%\", height: \"56px\" }}\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"success\"\n        >\n          Create Event\n        </Button>\n      </Box>\n    </form>\n  );\n};\nexport default EventFormHorizontal;\n","import * as yup from \"yup\";\n\nexport const validationSchema = yup.object({\n  firstName: yup\n    .string(\"Enter your first name\")\n    .max(15, \"First name should be of maximum 15 characters length\")\n    .required(\"First name  is required\"),\n  lastName: yup\n    .string(\"Enter your last name\")\n    .max(15, \"Last name should be of maximum 15 characters length\")\n    .required(\"Last name is required\"),\n  email: yup\n    .string(\"Enter your email\")\n    .email(\"Enter a valid email\")\n    .required(\"Email is required\"),\n  eventDate: yup.date().required(\"Date and time is required\"),\n});\n\nexport const initialValues = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  eventDate: \"\",\n};\n","import React, { useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport EventsServices from \"services/api/events\";\nimport { useDispatch } from \"react-redux\";\nimport { useSnackbar } from \"notistack\";\nexport const AlertDialog = ({ data }) => {\n  const { enqueueSnackbar } = useSnackbar();\n  const Snackbar = (msg, variant) => {\n    enqueueSnackbar(msg, { variant });\n  };\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleDelete = () => {\n    EventsServices.deleteOneItem(dispatch, data._id, Snackbar);\n    handleClose();\n  };\n\n  return (\n    <div>\n      <Button\n        // sx={styles.button}\n        variant=\"contained\"\n        color={\"error\"}\n        onClick={handleClickOpen}\n      >\n        Delete\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Are you shure to delete this event?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Event of {data.firstName} {data.lastName} scheduled on{\" \"}\n            {new Date(data.eventDate).toLocaleString()} will be deleted!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button variant=\"contained\" color={\"inherit\"} onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color={\"error\"}\n            onClick={() => handleDelete()}\n            autoFocus\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { useSelector } from \"react-redux\";\nimport { AlertDialog } from \"components/Dialog\";\n\nconst EventsTable = () => {\n  const [rowData, setRowData] = useState(\"\");\n\n  const events = useSelector((state) => state.events.items);\n\n  const columns = [\n    { field: \"id\", headerName: \"No.\", headerAlign: \"left\", width: 120 },\n    {\n      field: \"firstName\",\n      headerName: \"First Name\",\n      headerAlign: \"left\",\n      width: 250,\n      editable: true,\n    },\n    {\n      field: \"lastName\",\n      headerName: \"Last Name\",\n      headerAlign: \"left\",\n      width: 250,\n      editable: true,\n    },\n\n    {\n      field: \"email\",\n      headerName: \"E-Mail\",\n      headerAlign: \"left\",\n      width: 250,\n      editable: true,\n    },\n    {\n      field: \"eventDate\",\n      headerName: \"Event Date \",\n      headerAlign: \"left\",\n      width: 250,\n      // type: \"date\",\n      editable: true,\n    },\n    {\n      field: \"delete\",\n      headerName: \"Delete item \",\n      headerAlign: \"left\",\n      width: 200,\n      renderCell: () => {\n        return <AlertDialog data={rowData} />;\n      },\n    },\n  ];\n\n  let rows = [];\n  if (events) {\n    events.forEach((element, i) => {\n      rows.push({\n        _id: element._id,\n        id: i + 1,\n        firstName: element.firstName,\n        lastName: element.lastName,\n        email: element.email,\n        eventDate: new Date(element.eventDate).toLocaleString(),\n      });\n    });\n  }\n\n  return (\n    <div\n      style={{\n        height: \"calc(100vh - 248px)\",\n        marginTop: \"auto\",\n        marginBottom: \"auto\",\n        width: \"100%\",\n      }}\n    >\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        pageSize={10}\n        rowsPerPageOptions={[10]}\n        disableSelectionOnClick\n        density=\"comfortable\"\n        onCellClick={(e) => setRowData(e.row)}\n      />\n    </div>\n  );\n};\nexport default EventsTable;\n","import { Box } from \"@mui/system\";\nimport EventsTable from \"components/DataTable\";\nimport EventFormHorizontal from \"components/Form\";\n\nconst EventsTableView = () => {\n  return (\n    <Box sx={{ height: \"100%\" }}>\n      <EventsTable />\n      <EventFormHorizontal />\n    </Box>\n  );\n};\nexport default EventsTableView;\n"],"names":["dispatch","useDispatch","enqueueSnackbar","useSnackbar","Snackbar","msg","variant","formik","useFormik","initialValues","validationSchema","onSubmit","newEvent","firstName","values","lastName","email","eventDate","Date","parse","EventsServices","resetForm","handleSubmit","component","Paper","sx","py","width","height","display","flexDirection","justifyContent","id","name","type","label","onChange","handleChange","onBlur","handleBlur","value","error","touched","Boolean","errors","helperText","color","yup","max","required","AlertDialog","data","useState","open","setOpen","handleClose","Button","onClick","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","toLocaleString","DialogActions","_id","autoFocus","rowData","setRowData","events","useSelector","state","items","columns","field","headerName","headerAlign","editable","renderCell","rows","forEach","element","i","push","style","marginTop","marginBottom","pageSize","rowsPerPageOptions","disableSelectionOnClick","density","onCellClick","e","row","Box"],"sourceRoot":""}